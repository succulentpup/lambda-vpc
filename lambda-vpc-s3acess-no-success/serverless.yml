service: ${self:custom.package.name}

plugins:
  - serverless-esbuild
  - serverless-iam-roles-per-function
  - serverless-s3-cleaner
  - serverless-deployment-bucket
  - serverless-offline  # serverless-esbuild should precede serverless-offline or keep offline plugins at the end

frameworkVersion: '>=3.0.0 <4.0.0' # helps to be in same major version unless team wants to change

package:
  individually: true # helps in reducing the zip size of the lambdas,  hence faster deployments. Especially when deploying individual lambdas.

provider:
  name: aws
  architecture: arm64  # It's cost & performance effective. If errors are suspected on underlying architecture, comment this & test.
  runtime: nodejs14.x
  versionFunctions: false  # won't create versions of lambda
  memorySize: 1024  # change it as per the need of memory
  timeout: 30 # default timeout
  logRetentionInDays: 14 # cloudwatch logs add some cost, mind it while increasing this configuration
  region: ${opt:region, 'eu-west-2'} # Change region as per your deployment region.
  stage: ${opt:stage, 'dev'}
  endpointType: REGIONAL # can be PRIVATE if we want to restrict the accessibility of the endpoints to VPC resources only.
  deploymentBucket:
    name: ${self:service}.${self:provider.region}.deploys # Can be more descriptive
    serverSideEncryption: AES256
  stackPolicy: ${self:custom.stackPolicy} # helpful to define permissions, retention policies etc
  iamRoleStatements: [ ]
  tags:
    project: ${self:service}
    stage: ${self:provider.stage}
  vpc: # All the lambdas defined in this service will be put in the subnets
    securityGroupIds:
      - Ref: LambdaSecurityGroup
    subnetIds:
      - Ref: PrivateSubnet1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # useful for performance optimization, ref: http keep alive
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}

custom:
  env: ${file(./env/${self:provider.stage}.yml)} # Stage specific environment variables can be defined
  base: ${self:service}-${self:provider.stage}
  package: ${file(./package.json)}
  stackPolicy: ${file(./env/stackPolicy.yml):${self:provider.stage}}
  serverless-iam-roles-per-function:  # lets to have iam policies at the global level & inherit at function level.
    defaultInherit: true
  UsageDetailsBucketName: ${self:service}-usage-details-sg
  serverless-s3-cleaner:
    # (optional) Whether to prompt before emptying a bucket. Default is 'false'.
    prompt: false
    # Names of buckets to remove before a stack is removed, or via 'sls s3clean' command
    buckets:
      - ${self:custom.UsageDetailsBucketName}
    # (optional) Buckets to remove before a stack is deployed.
#    bucketsToCleanOnDeploy:
#      - oldBucketName
  esbuild:
    packager: yarn
    bundle: true
    minify: true
    sourcemap: true
    keepNames: true
#    external:
#      - lodash
#    watch:
#     # anymatch-compatible definition (https://github.com/es128/anymatch)
#     pattern: [ './index.ts', 'src/**/*.ts' ] # default .
#     ignore: [ '.serverless/**/*', '.build' ] # default ['.build', 'dist', 'node_modules']

functions: # add your functions
  health:
    handler: src/health/index.handler
    name: ${self:custom.base}-health
    description: used as heartbeat lambda for this service
    vpc: ~  # excluding this lambda from the VPC defined by this service
    events:
      - http:
          method: get
          cors: true
          path: health
  parseUsageDetailsPri:
    handler: src/parseUsageDetailsPri/index.handler
    name: ${self:custom.base}-parseUsageDetailsPri
    description: should fail because this lambda is placed in a private subnet that does not have internet access.
    environment:
      BUCKET: ${self:custom.UsageDetailsBucketName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:ListBucket
        Resource:
          - arn:aws:s3:::${self:custom.UsageDetailsBucketName}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - arn:aws:s3:::${self:custom.UsageDetailsBucketName}/PrivateCSVFiles/*   # manually created this folder in AWS web console of S3
    events:
      - s3:
          bucket: ${self:custom.UsageDetailsBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: PrivateCSVFiles/   # manually created this folder in AWS web console of S3
            - suffix: .csv # no 2 events with 'same prefix and suffix' are allowed
          existing: true

#  --------------------------------------------------------------------------------------------------------------  #
#  Note: Following is a lambda put in a public subnet. Initial thought was it should be able to access the S3 bucket
#         Fact is even though lambda is in a public subnet, it doesn't own a public IP hence not able to access internet.
#         Following is an excerpt from AWS documentation. Ref: https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html
#           Ensure that instances in your subnet have a globally unique IP address (public IPv4 address, Elastic IP address, or IPv6 address).
#         Hence, it will still fail with timeout error.
#         If you want to check, uncomment this lambda, add public subnet config to vpc.yml, deploy and see the logs.

#  parseUsageDetailsPub:
#    handler: src/parseUsageDetailsPub/index.handler
#    name: ${self:custom.base}-parseUsageDetailsPub
#    description: listens to usage-details-sg bucket/CSVFiles path.
#    vpc:
#      securityGroupIds:
#        - Ref: LambdaSecurityGroup
#      subnetIds:
#        - Ref: PublicSubnet1
#    environment:
#      BUCKET: ${self:custom.UsageDetailsBucketName}
#    iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - s3:ListBucket
#        Resource:
#          - arn:aws:s3:::${self:custom.UsageDetailsBucketName}
#      - Effect: Allow
#        Action:
#          - s3:GetObject
#        Resource:
#          - arn:aws:s3:::${self:custom.UsageDetailsBucketName}/PublicCSVFiles/*   # manually created this folder in AWS web console of S3
#    events:
#      - s3:
#          bucket: ${self:custom.UsageDetailsBucketName}
#          event: s3:ObjectCreated:*
#          rules:
#            - prefix: PublicCSVFiles/   # manually created this folder in AWS web console of S3
#            - suffix: .csv # no 2 events with same prefix and suffix are allowed
#          existing: true
#  --------------------------------------------------------------------------------------------------------------  #
resources:
  - ${file(resources/vpc.yml)}
  - ${file(resources/s3-usageDetails.yml)}
  - ${file(resources/vpc.yml)}
  # DynamoDB Tables
  # Output
